/* SyntaxChecker.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. SyntaxChecker.java */
package loggerplusplus.filter.parser;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.regex.Pattern;

public class SyntaxChecker/*@bgen(jjtree)*/implements SyntaxCheckerTreeConstants, SyntaxCheckerConstants {/*@bgen(jjtree)*/
  protected JJTSyntaxCheckerState jjtree = new JJTSyntaxCheckerState();
    public SyntaxChecker(String s){
        this(new StringReader(s));
    }

    public static void main(String[] args) throws IOException {
        String str;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        while(!(str = in.readLine()).equalsIgnoreCase("END")) {
            try {
                SimpleNode root = parseFilter(str);
                root.dump("");
            } catch (Throwable e) {
                System.out.println("Syntax check failed: " + e.getMessage());
            }
        }
    }

    public static SimpleNode parseFilter(String string) throws IOException, ParseException {
        SyntaxChecker syntaxChecker = new SyntaxChecker(string);
        return syntaxChecker.Filter();
    }

  final public SimpleNode Filter() throws ParseException {    try {
/*@bgen(jjtree) FILTER */
  ASTFILTER jjtn000 = new ASTFILTER(JJTFILTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Expression();
        jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return jjtn000;}
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Filter");
    }
}

  final public void Expression() throws ParseException {    try {
/*@bgen(jjtree) EXPRESSION */
  ASTEXPRESSION jjtn000 = new ASTEXPRESSION(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          jj_consume_token(LPAREN);
          Expression();
          jj_consume_token(RPAREN);
          break;
          }
        case BOOLEAN:
        case SINGLEQUOTEDSTRING:
        case DOUBLEQUOTEDSTRING:
        case NUMBER:
        case REGEXLITERAL:
        case REGEX:
        case IDENTIFIER:{
          Comparison();
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OR:
          case AND:
          case XOR:{
            ;
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            break label_1;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AND:{
            And();
            break;
            }
          case OR:{
            Or();
            break;
            }
          case XOR:{
            Xor();
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LPAREN:{
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
            break;
            }
          case BOOLEAN:
          case SINGLEQUOTEDSTRING:
          case DOUBLEQUOTEDSTRING:
          case NUMBER:
          case REGEXLITERAL:
          case REGEX:
          case IDENTIFIER:{
            Comparison();
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("Expression");
    }
}

  final public void Brackets() throws ParseException {    try {

      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
    } finally {
      trace_return("Brackets");
    }
}

  final public void Comparison() throws ParseException {    try {
/*@bgen(jjtree) COMPARISON */
  ASTCOMPARISON jjtn000 = new ASTCOMPARISON(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:{
          Boolean();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EQ:{
            Eq();
            break;
            }
          case NEQ:{
            Neq();
            break;
            }
          case XOR:{
            Xor();
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER:{
            Identifier();
            break;
            }
          case BOOLEAN:{
            Boolean();
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        case NUMBER:{
          Number();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LT:{
            Lt();
            break;
            }
          case GT:{
            Gt();
            break;
            }
          case LEQ:{
            Leq();
            break;
            }
          case GEQ:{
            Geq();
            break;
            }
          case EQ:{
            Eq();
            break;
            }
          case NEQ:{
            Neq();
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NUMBER:{
            Number();
            break;
            }
          case IDENTIFIER:{
            Identifier();
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        case SINGLEQUOTEDSTRING:
        case DOUBLEQUOTEDSTRING:
        case REGEXLITERAL:
        case REGEX:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SINGLEQUOTEDSTRING:
          case DOUBLEQUOTEDSTRING:{
            String();
            break;
            }
          case REGEXLITERAL:
          case REGEX:{
            Regex();
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EQ:{
            Eq();
            break;
            }
          case NEQ:{
            Neq();
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SINGLEQUOTEDSTRING:
          case DOUBLEQUOTEDSTRING:{
            String();
            break;
            }
          case REGEXLITERAL:
          case REGEX:{
            Regex();
            break;
            }
          case IDENTIFIER:{
            Identifier();
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        case IDENTIFIER:{
          Identifier();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EQ:
          case NEQ:
          case XOR:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EQ:{
              Eq();
              break;
              }
            case NEQ:{
              Neq();
              break;
              }
            case XOR:{
              Xor();
              break;
              }
            default:
              jj_la1[11] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SINGLEQUOTEDSTRING:
            case DOUBLEQUOTEDSTRING:{
              String();
              break;
              }
            case IDENTIFIER:{
              Identifier();
              break;
              }
            case REGEXLITERAL:
            case REGEX:{
              Regex();
              break;
              }
            case NUMBER:{
              Number();
              break;
              }
            case BOOLEAN:{
              Boolean();
              break;
              }
            default:
              jj_la1[12] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case GT:
          case LT:
          case GEQ:
          case LEQ:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LT:{
              Lt();
              break;
              }
            case GT:{
              Gt();
              break;
              }
            case LEQ:{
              Leq();
              break;
              }
            case GEQ:{
              Geq();
              break;
              }
            default:
              jj_la1[13] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IDENTIFIER:{
              Identifier();
              break;
              }
            case NUMBER:{
              Number();
              break;
              }
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("Comparison");
    }
}

//SimpleNode Filter() #FILTER :
//{}
//{
//    (
//        (LParen() Filter() RParen())
//        |
//        Expr()
//    )
//    ((And() | Or() | Xor()) Filter())*
//    {return jjtThis;}
//}
//
//void Expr() #EXPR:
//{}
//{
//    (
//        Boolean() ((Eq() | Neq() | Xor()) (Identifier() | Boolean() | Filter()))?
//        | Number() (Lt() | Gt() | Leq() | Geq() | Eq() | Neq()) (Number() | Identifier())
//        | (String() | Regex()) (Eq() | Neq()) (String() | Regex() | Identifier())
//        | Identifier() (
//            (Eq() | Neq() | Xor()) (String() | Identifier() | Regex() | Number() | Boolean() | Filter())
//            | (Lt() | Gt() | Leq() | Geq()) (Identifier() | Number())
//        )?
//    )
//}
  final public 
Float Number() throws ParseException {    try {
/*@bgen(jjtree) NUMBER */
 ASTNUMBER jjtn000 = new ASTNUMBER(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(NUMBER);
jjtn000.value = Float.parseFloat(t.image);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return (Float) jjtn000.value;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Number");
    }
}

  final public String String() throws ParseException {    try {
/*@bgen(jjtree) STRING */
 ASTSTRING jjtn000 = new ASTSTRING(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SINGLEQUOTEDSTRING:{
          t = jj_consume_token(SINGLEQUOTEDSTRING);
          break;
          }
        case DOUBLEQUOTEDSTRING:{
          t = jj_consume_token(DOUBLEQUOTEDSTRING);
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
jjtn000.value = t.image.substring(1,t.image.length()-1);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return (String) jjtn000.value;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("String");
    }
}

  final public Pattern Regex() throws ParseException {    try {
/*@bgen(jjtree) REGEX */
 ASTREGEX jjtn000 = new ASTREGEX(JJTREGEX);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case REGEXLITERAL:{
          t = jj_consume_token(REGEXLITERAL);
          break;
          }
        case REGEX:{
          t = jj_consume_token(REGEX);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
jjtn000.value = Pattern.compile(t.image.substring(1,t.image.length()-1), Pattern.CASE_INSENSITIVE);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return (Pattern) jjtn000.value;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Regex");
    }
}

  final public String Identifier() throws ParseException {    try {
/*@bgen(jjtree) IDENTIFIER */
 ASTIDENTIFIER jjtn000 = new ASTIDENTIFIER(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(IDENTIFIER);
jjtn000.value = t.image;
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return (String) jjtn000.value;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Identifier");
    }
}

  final public Boolean Boolean() throws ParseException {    try {
/*@bgen(jjtree) BOOLEAN */
 ASTBOOLEAN jjtn000 = new ASTBOOLEAN(JJTBOOLEAN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(BOOLEAN);
jjtn000.value = Boolean.parseBoolean(t.image);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return (Boolean) jjtn000.value;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Boolean");
    }
}

  final public void Eq() throws ParseException {    try {
/*@bgen(jjtree) EQ */
 ASTEQ jjtn000 = new ASTEQ(JJTEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(EQ);
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
jjtn000.value = t.image;
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("Eq");
    }
}

  final public void Neq() throws ParseException {    try {
/*@bgen(jjtree) NEQ */
 ASTNEQ jjtn000 = new ASTNEQ(JJTNEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(NEQ);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
jjtn000.value = t.image;
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("Neq");
    }
}

  final public void Gt() throws ParseException {    try {
/*@bgen(jjtree) GT */
 ASTGT jjtn000 = new ASTGT(JJTGT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(GT);
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
jjtn000.value = t.image;
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("Gt");
    }
}

  final public void Geq() throws ParseException {    try {
/*@bgen(jjtree) GEQ */
 ASTGEQ jjtn000 = new ASTGEQ(JJTGEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(GEQ);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
jjtn000.value = t.image;
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("Geq");
    }
}

  final public void Lt() throws ParseException {    try {
/*@bgen(jjtree) LT */
 ASTLT jjtn000 = new ASTLT(JJTLT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(LT);
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
jjtn000.value = t.image;
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("Lt");
    }
}

  final public void Leq() throws ParseException {    try {
/*@bgen(jjtree) LEQ */
 ASTLEQ jjtn000 = new ASTLEQ(JJTLEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(LEQ);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
jjtn000.value = t.image;
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("Leq");
    }
}

  final public void And() throws ParseException {    try {
/*@bgen(jjtree) AND */
 ASTAND jjtn000 = new ASTAND(JJTAND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(AND);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
jjtn000.value = t.image;
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("And");
    }
}

  final public void Or() throws ParseException {    try {
/*@bgen(jjtree) OR */
 ASTOR jjtn000 = new ASTOR(JJTOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(OR);
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
jjtn000.value = t.image;
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("Or");
    }
}

  final public void Xor() throws ParseException {    try {
/*@bgen(jjtree) XOR */
 ASTXOR jjtn000 = new ASTXOR(JJTXOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(XOR);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
jjtn000.value = t.image;
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("Xor");
    }
}

  /** Generated Token Manager. */
  public SyntaxCheckerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x7bc000,0x3800,0x3800,0x7bc000,0x2060,0x204000,0x7e0,0x220000,0x198000,0x60,0x398000,0x2060,0x3bc000,0x780,0x220000,0x27e0,0x3bc000,0x18000,0x180000,};
	}

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public SyntaxChecker(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SyntaxChecker(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SyntaxCheckerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SyntaxChecker(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SyntaxCheckerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SyntaxCheckerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SyntaxChecker(SyntaxCheckerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SyntaxCheckerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[24];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 19; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 24; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

/** Enable tracing. */
  final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
	 trace_enabled = false;
  }

  protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

}
